// ====================================
// FICHIER: Code.gs - VERSION FINALE
// ====================================

// Configuration des IDs des sheets
const CONFIG = {
  GRILLES_SHEET_ID: '1ZHrq0FGeNEX3rSqSCow_D0IR7IjzPOQCTBDPPNA0jUI', // Classeur unique
  DOSSIER_CORRECTIONS_ID: '1V-OMhH5sHR9hWV-PWsUGHkL5_K6sUfUw'
};

/**
 * Fonction principale pour servir l'interface HTML
 */
function doGet() {
  try {
    const template = HtmlService.createTemplateFromFile('index');
    return template.evaluate()
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
      .setTitle('Application de Correction')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1');
  } catch (error) {
    console.error('Erreur dans doGet:', error);
    return HtmlService.createHtmlOutput(`
      <h1>Erreur de chargement</h1>
      <p>Erreur: ${error.message}</p>
      <p>Veuillez r√©essayer ou contacter l'administrateur.</p>
    `);
  }
}

/**
 * Inclure des fichiers CSS/JS dans le HTML
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * üöÄ OPTIMIS√â: R√©cup√©rer √©l√®ves ET types de production en un seul appel
 */
function getElevesEtTypes() {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.GRILLES_SHEET_ID);
    
    // 1. R√©cup√©rer les √©l√®ves depuis la nouvelle feuille
    const elevesSheet = spreadsheet.getSheetByName('dataEleves');
    const elevesData = elevesSheet.getRange('A2:B60').getValues(); // Colonnes A et B, lignes 2-60
    
    const eleves = [];
    for (let i = 0; i < elevesData.length; i++) {
      const email = elevesData[i][0] ? elevesData[i][0].toString().trim() : '';
      const nom = elevesData[i][1] ? elevesData[i][1].toString().trim() : '';
      
      if (nom !== '') { // Le nom doit √™tre pr√©sent
        eleves.push({
          nom: nom,        // Colonne B = nom affich√©
          email: email     // Colonne A = email en m√©moire
        });
      }
    }
    
    // 2. R√©cup√©rer les types de production (noms des autres feuilles)
    const sheets = spreadsheet.getSheets();
    const typesProduction = sheets
      .map(sheet => sheet.getName())
      .filter(name => name !== 'dataEleves'); // Exclure la feuille des √©l√®ves
    
    // 3. Retourner les deux en une fois !
    return {
      success: true,
      eleves: eleves.filter((eleve, index, self) => 
        index === self.findIndex(e => e.nom === eleve.nom)
      ),
      typesProduction: typesProduction
    };
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error);
    return {
      success: false,
      error: error.message,
      eleves: [],
      typesProduction: []
    };
  }
}

/**
 * üöÄ OPTIMIS√â: R√©cup√©rer la liste des √©l√®ves depuis le classeur unique
 */
function getEleves() {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.GRILLES_SHEET_ID);
    const sheet = spreadsheet.getSheetByName('dataEleves');
    
    // Lire les colonnes A (email) et B (nom) des lignes 2 √† 60
    const data = sheet.getRange('A2:B60').getValues();
    
    const eleves = [];
    for (let i = 0; i < data.length; i++) {
      const email = data[i][0] ? data[i][0].toString().trim() : '';
      const nom = data[i][1] ? data[i][1].toString().trim() : '';
      
      if (nom !== '') { // Le nom doit √™tre pr√©sent
        eleves.push({
          nom: nom,        // Colonne B = nom affich√©
          email: email     // Colonne A = email en m√©moire
        });
      }
    }
    
    // Supprimer les doublons bas√©s sur le nom
    return eleves.filter((eleve, index, self) => 
      index === self.findIndex(e => e.nom === eleve.nom)
    );
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des √©l√®ves:', error);
    return [];
  }
}

/**
 * R√©cup√©rer les types de production (noms des feuilles) - OPTIMIS√â
 */
function getTypesProduction() {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.GRILLES_SHEET_ID);
    const sheets = spreadsheet.getSheets();
    
    return sheets
      .map(sheet => sheet.getName())
      .filter(name => name !== 'dataEleves'); // Exclure la feuille des √©l√®ves
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des types de production:', error);
    return [];
  }
}

/**
 * R√©cup√©rer la grille de correction pour un type de production donn√©
 */
function getGrilleCorrection(typeProduction) {
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.GRILLES_SHEET_ID).getSheetByName(typeProduction);
    if (!sheet) {
      throw new Error(`Feuille "${typeProduction}" non trouv√©e`);
    }
    
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
      throw new Error('Donn√©es insuffisantes dans la feuille');
    }
    
    const headers = data[0]; // Ligne 1: en-t√™tes
    const grille = {
      indicateurs: headers.slice(1, 7), // Colonnes B √† G
      criteres: []
    };
    
    // Traiter chaque ligne de crit√®res (√† partir de la ligne 2)
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] && data[i][0].toString().trim() !== '') {
        grille.criteres.push({
          nom: data[i][0].toString().trim(),
          indicateurs: data[i].slice(1, 7), // Colonnes B √† G
          points: parseFloat(data[i][7]) || 0 // Colonne H
        });
      }
    }
    
    return grille;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de la grille:', error);
    return null;
  }
}

/**
 * üöÄ OPTIMIS√â: R√©cup√©rer l'email d'un √©l√®ve depuis la feuille dataEleves
 */
function getEmailEleve(nomEleve) {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.GRILLES_SHEET_ID);
    const sheet = spreadsheet.getSheetByName('dataEleves');
    const data = sheet.getDataRange().getValues();
    
    // Chercher la ligne correspondant √† l'√©l√®ve (colonne B = nom, colonne A = email)
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] && data[i][1].toString().trim() === nomEleve.trim()) {
        // Retourner l'email (colonne A)
        return data[i][0] ? data[i][0].toString().trim() : null;
      }
    }
    return null;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'email:', error);
    return null;
  }
}

/**
 * Enregistrer une correction
 */
function enregistrerCorrection(nomEleve, typeProduction, corrections, pointsTotal) {
  try {
    // Cr√©er un nouveau spreadsheet
    const nomFichier = `${nomEleve} - ${typeProduction}`;
    const nouveauSheet = SpreadsheetApp.create(nomFichier);
    
    // Copier la structure de la grille mod√®le
    const grilleModele = SpreadsheetApp.openById(CONFIG.GRILLES_SHEET_ID);
    const feuilleModele = grilleModele.getSheetByName(typeProduction);
    
    if (feuilleModele) {
      const dataModele = feuilleModele.getDataRange().getValues();
      const feuillePrincipale = nouveauSheet.getActiveSheet();
      feuillePrincipale.setName(typeProduction);
      
      // Copier les donn√©es de base
      if (dataModele.length > 0) {
        feuillePrincipale.getRange(1, 1, dataModele.length, dataModele[0].length).setValues(dataModele);
      }
      
      // Ajouter les corrections avec mise en forme
      ajouterCorrections(feuillePrincipale, corrections, pointsTotal);
      
      // Ajouter les bordures finales
      ajouterBordures(feuillePrincipale);
    }
    
    // D√©placer vers le dossier sp√©cifi√©
    const dossier = DriveApp.getFolderById(CONFIG.DOSSIER_CORRECTIONS_ID);
    const fichier = DriveApp.getFileById(nouveauSheet.getId());
    dossier.addFile(fichier);
    DriveApp.getRootFolder().removeFile(fichier);
    
    // Partager avec l'√©l√®ve (si email disponible) - avec gestion d'erreur silencieuse
    const emailEleve = getEmailEleve(nomEleve);
    if (emailEleve && emailEleve.includes('@')) {
      try {
        nouveauSheet.addViewer(emailEleve);
        console.log(`Sheet partag√© avec: ${emailEleve}`);
      } catch (emailError) {
        console.warn(`Impossible de partager avec ${emailEleve}:`, emailError);
      }
    } else {
      console.log(`Aucun email valide trouv√© pour ${nomEleve}, pas de partage`);
    }
    
    return {
      success: true,
      url: nouveauSheet.getUrl(),
      message: `Correction enregistr√©e pour ${nomEleve}`
    };
    
  } catch (error) {
    console.error('Erreur lors de l\'enregistrement:', error);
    return {
      success: false,
      message: `Erreur: ${error.message}`
    };
  }
}

/**
 * Ajouter les corrections au sheet avec mise en forme - VERSION CORRIG√âE
 */
function ajouterCorrections(sheet, corrections, pointsTotal) {
  // Calculer le total maximum possible SEULEMENT pour les crit√®res cot√©s
  let pointsMaxTotal = 0;
  Object.keys(corrections).forEach(critereIndex => {
    const correction = corrections[critereIndex];
    // ‚úÖ SOLUTION 3: Ne compter que les crit√®res effectivement cot√©s
    if (correction.selected !== null && correction.pointsMax) {
      pointsMaxTotal += correction.pointsMax;
    }
  });
  
  // Ajouter les colonnes pour les corrections
  const lastCol = sheet.getLastColumn();
  const colCorrection = lastCol + 1;
  const colPoints = lastCol + 2;
  
  // En-t√™tes
  sheet.getRange(1, colCorrection).setValue('Correction');
  sheet.getRange(1, colPoints).setValue('Points obtenus');
  
  // Mise en forme des en-t√™tes
  const headerRange = sheet.getRange(1, colCorrection, 1, 2);
  headerRange.setFontWeight('bold')
            .setFontSize(12)
            .setBackground('#1a73e8')
            .setFontColor('white')
            .setHorizontalAlignment('center');
  
  // Traiter chaque correction
  let ligne = 2;
  Object.keys(corrections).forEach(critereIndex => {
    const correction = corrections[critereIndex];
    
    if (correction.selected !== null && correction.indicateur) {
      // Cellule correction (colonne J)
      const celluleCorrection = sheet.getRange(ligne, colCorrection);
      celluleCorrection.setValue(correction.indicateur);
      
      // Cellule points (colonne K)  
      const cellulePoints = sheet.getRange(ligne, colPoints);
      cellulePoints.setValue(correction.points);
      
      // D√©terminer les couleurs selon le pourcentage
      let couleurFond, couleurTexte;
      const pourcentage = correction.pourcentage || 0;
      
      if (pourcentage < 50) {
        // N√©ant, Tr√®s insuffisant, Insuffisant = Rouge
        couleurFond = '#f44336';
        couleurTexte = 'white';
      } else {
        // Suffisant, Acquis, Parfaitement acquis = Vert
        couleurFond = '#4caf50';
        couleurTexte = 'white';
      }
      
      // Appliquer la mise en forme √† la cellule correction
      celluleCorrection.setBackground(couleurFond)
                      .setFontColor(couleurTexte)
                      .setFontWeight('bold')
                      .setWrap(true)
                      .setVerticalAlignment('middle');
      
      // Mise en forme sp√©ciale pour la colonne points
      cellulePoints.setFontSize(14)
                   .setFontWeight('bold')
                   .setBackground(couleurFond)
                   .setFontColor(couleurTexte)
                   .setHorizontalAlignment('center')
                   .setVerticalAlignment('middle');
      
      // Surligner aussi la cellule de l'indicateur choisi dans les colonnes B-G
      const ligneActuelle = ligne;
      const colonnesIndicateurs = sheet.getRange(ligneActuelle, 2, 1, 6); // Colonnes B √† G
      const valeurs = colonnesIndicateurs.getValues()[0];
      
      // Trouver la colonne qui contient l'indicateur s√©lectionn√©
      for (let colIndex = 0; colIndex < valeurs.length; colIndex++) {
        if (valeurs[colIndex] && valeurs[colIndex].toString().trim() === correction.indicateur.toString().trim()) {
          const celluleIndicateur = sheet.getRange(ligneActuelle, 2 + colIndex);
          celluleIndicateur.setBackground(couleurFond)
                           .setFontColor(couleurTexte)
                           .setFontWeight('bold')
                           .setWrap(true);
          break;
        }
      }
    }
    ligne++;
  });
  
  // Ajouter le total avec le format "points obtenus / points maximum"
  const ligneTotalCorrection = ligne + 1;
  const ligneTotalPoints = ligne + 1;
  
  sheet.getRange(ligneTotalCorrection, colCorrection).setValue('TOTAL');
  sheet.getRange(ligneTotalPoints, colPoints).setValue(`${pointsTotal.toFixed(1)} / ${pointsMaxTotal}`);
  
  // Mise en forme du total
  const totalCorrectionCell = sheet.getRange(ligneTotalCorrection, colCorrection);
  const totalPointsCell = sheet.getRange(ligneTotalPoints, colPoints);
  
  totalCorrectionCell.setFontWeight('bold')
                     .setFontSize(14)
                     .setBackground('#1a73e8')
                     .setFontColor('white')
                     .setHorizontalAlignment('center');
  
  totalPointsCell.setFontWeight('bold')
                 .setFontSize(16)
                 .setBackground('#1a73e8')
                 .setFontColor('white')
                 .setHorizontalAlignment('center');
  
  // Param√©trer toutes les colonnes
  configurerColonnes(sheet);
  
  // Ajouter les commentaires si pr√©sents - VERSION CORRIG√âE
  if (corrections.commentairesGeneraux && corrections.commentairesGeneraux.trim() !== '') {
    const ligneCommentaires = ligne + 3;
    
    // Ajouter le titre des commentaires
    sheet.getRange(ligneCommentaires, 1).setValue('Commentaires g√©n√©raux:');
    sheet.getRange(ligneCommentaires, 1)
         .setFontWeight('bold')
         .setFontSize(12)
         .setBackground('#fff3e0');
    
    // ‚ö†Ô∏è SOLUTION: Utiliser plusieurs cellules individuelles au lieu de merger
    const ligneTexteCommentaire = ligneCommentaires + 1;
    const texteCommentaire = corrections.commentairesGeneraux.toString();
    
    // Placer le texte dans la premi√®re colonne seulement
    sheet.getRange(ligneTexteCommentaire, 1)
         .setValue(texteCommentaire)
         .setWrap(true)
         .setVerticalAlignment('top')
         .setBorder(true, true, true, true, true, true)
         .setBackground('#f8f9fa');
    
    // √âlargir la premi√®re colonne pour les commentaires
    sheet.setColumnWidth(1, 400);
    
    // Ajouter une bordure aux cellules adjacentes pour l'esth√©tique (mais sans merger)
    for (let col = 2; col <= Math.min(6, sheet.getLastColumn()); col++) {
      sheet.getRange(ligneTexteCommentaire, col)
           .setBorder(true, true, true, true, true, true)
           .setBackground('#f8f9fa');
    }
  }
  
  // ‚úÖ MAINTENANT on peut figer la colonne A en toute s√©curit√©
  sheet.setFrozenColumns(1);
}

/**
 * Configurer les colonnes du sheet
 */
function configurerColonnes(sheet) {
  const lastCol = sheet.getLastColumn();
  
  // D√©finir la largeur de toutes les colonnes √† 200px
  for (let col = 1; col <= lastCol; col++) {
    sheet.setColumnWidth(col, 200);
  }
  
  // Param√©trer le retour √† la ligne pour toutes les cellules
  const dataRange = sheet.getDataRange();
  dataRange.setWrap(true)
           .setVerticalAlignment('middle');
  
  // Mise en forme sp√©ciale pour la colonne A (crit√®res)
  const critereColumn = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1);
  critereColumn.setFontWeight('bold')
               .setVerticalAlignment('middle')
               .setWrap(true);
  
  // Mise en forme pour les en-t√™tes des indicateurs (ligne 1, colonnes B-G)
  const headersRange = sheet.getRange(1, 2, 1, 6);
  headersRange.setFontWeight('bold')
              .setBackground('#e3f2fd')
              .setHorizontalAlignment('center')
              .setVerticalAlignment('middle')
              .setWrap(true);
  
  // Mise en forme pour la colonne des points max (colonne H)
  const pointsMaxColumn = sheet.getRange(1, 8, sheet.getLastRow(), 1);
  pointsMaxColumn.setFontWeight('bold')
                 .setBackground('#fff3e0')
                 .setHorizontalAlignment('center')
                 .setVerticalAlignment('middle');
}

/**
 * Ajouter des bordures au tableau
 */
function ajouterBordures(sheet) {
  const dataRange = sheet.getDataRange();
  dataRange.setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID);
}

// ========================================
// FONCTIONNALIT√â IA - PR√âCORRECTION
// ========================================

/**
 * ü§ñ Fonction principale de pr√©correction IA
 */
function precorrectionIA(typeProduction, grilleData, copieEleve) {
  try {
    console.log('ü§ñ D√©but pr√©correction IA pour:', typeProduction);
    
    // V√©rifications
    if (!typeProduction || !grilleData || !copieEleve) {
      return {
        success: false,
        message: 'Donn√©es manquantes pour la pr√©correction'
      };
    }
    
    if (!copieEleve.trim()) {
      return {
        success: false,
        message: 'Le texte de la copie ne peut pas √™tre vide'
      };
    }
    
    // Formatter la grille pour l'IA
    const grilleFormatee = formaterGrillePourIA(grilleData);
    
    // Construire les prompts
    const promptSystem = construirePromptSystem();
    const promptUser = construirePromptUser(typeProduction, grilleFormatee, copieEleve);
    
    // Appel √† l'API Claude
    const reponseIA = appellerAPIClaud(promptSystem, promptUser);
    
    if (reponseIA.success) {
      return {
        success: true,
        corrections: reponseIA.data.corrections,
        commentaire_final: reponseIA.data.commentaire_final,
        message: 'Pr√©correction IA termin√©e avec succ√®s'
      };
    } else {
      return {
        success: false,
        message: reponseIA.message || 'Erreur lors de l\'appel √† l\'IA'
      };
    }
    
  } catch (error) {
    console.error('Erreur pr√©correction IA:', error);
    return {
      success: false,
      message: `Erreur technique: ${error.message}`
    };
  }
}

/**
 * üìã Formater la grille de correction pour l'IA
 */
function formaterGrillePourIA(grilleData) {
  let grilleTexte = '';
  
  grilleData.criteres.forEach((critere, index) => {
    grilleTexte += `\nCRIT√àRE ${index} : "${critere.nom}" (Maximum: ${critere.points} points)\n`;
    grilleTexte += 'Indicateurs disponibles :\n';
    
    const pourcentages = [0, 15, 35, 60, 80, 100];
    const niveaux = ['N√©ant', 'Tr√®s insuffisant', 'Insuffisant', 'Suffisant', 'Acquis', 'Parfaitement acquis'];
    
    critere.indicateurs.forEach((indicateur, indIndex) => {
      if (indicateur && indicateur.toString().trim() !== '') {
        const pourcentage = pourcentages[indIndex] || 0;
        const niveau = niveaux[indIndex] || 'Inconnu';
        const points = (critere.points * pourcentage / 100).toFixed(1);
        
        grilleTexte += `  - "${indicateur}" (${niveau} - ${pourcentage}% = ${points} pts)\n`;
      }
    });
    grilleTexte += '\n';
  });
  
  return grilleTexte;
}

/**
 * üéØ Construire le prompt system pour Claude - VERSION CORRIG√âE
 */
function construirePromptSystem() {
  return `Tu es un assistant p√©dagogique expert sp√©cialis√© dans l'√©valuation √©ducative. Tu corriges les productions d'√©l√®ves avec bienveillance et pr√©cision selon des grilles de correction structur√©es.

CONSIGNES IMPORTANTES :
- Sois toujours bienveillant et encourageant dans tes commentaires
- Justifie chaque choix d'indicateur de mani√®re p√©dagogique
- Propose des commentaires constructifs pour aider l'√©l√®ve √† progresser
- Respecte scrupuleusement la grille de correction fournie
- Adapte ton vocabulaire au niveau des √©l√®ves concern√©s
- Choisis pour chaque crit√®re l'indicateur le plus appropri√© parmi ceux propos√©s

ATTENTION PARTICULI√àRE √Ä L'ORTHOGRAPHE ET √Ä LA PONCTUATION :
- Sois BEAUCOUP PLUS S√âV√àRE sur les erreurs d'orthographe, de grammaire et de ponctuation
- Ces aspects techniques de la langue doivent √™tre rigoureusement √©valu√©s
- Une copie avec de nombreuses fautes ne peut PAS obtenir les niveaux "Acquis" ou "Parfaitement acquis" pour les crit√®res linguistiques
- M√™me 3-4 fautes d'orthographe doivent faire descendre vers "Insuffisant" ou "Suffisant" maximum
- Distingue clairement les erreurs occasionnelles des erreurs syst√©matiques

STRUCTURE DU COMPTE RENDU CRITIQUE - CRIT√àRE "R√âSUM√â" :
- Pour le crit√®re "r√©sum√©", v√©rifie imp√©rativement que l'√©l√®ve respecte la structure attendue du compte rendu critique
- Le R√âSUM√â doit √™tre clairement distinct et s√©par√© de la PARTIE CRITIQUE
- La structure correcte est : 1) R√âSUM√â objectif en premier, puis 2) PARTIE CRITIQUE avec arguments personnels
- Si l'√©l√®ve m√©lange r√©sum√© et critique, ou ne distingue pas ces deux parties, le crit√®re "r√©sum√©" doit √™tre p√©nalis√©
- Un bon r√©sum√© est objectif, neutre et pr√©sente les id√©es principales sans donner d'opinion personnelle

CRIT√àRES √Ä √âVALUER ABSOLUMENT :
- Tu DOIS OBLIGATOIREMENT √©valuer TOUS les crit√®res pr√©sents dans la grille, sans exception
- N'oublie JAMAIS d'√©valuer le crit√®re "Partie critique - Qualit√© persuasive des arguments" s'il est pr√©sent
- Ce crit√®re est CRUCIAL pour les productions argumentatives et doit TOUJOURS recevoir une note
- Si un crit√®re contient "persuasif", "argumentatif", "critique" ou "qualit√© des arguments", il est OBLIGATOIRE de l'√©valuer
- Analyse avec attention la force des arguments, leur pertinence et leur capacit√© de persuasion

FORMAT DE R√âPONSE EXIG√â :
Tu dois r√©pondre EXCLUSIVEMENT en JSON valide avec cette structure exacte :
{
  "corrections": {
    "0": {
      "indicateur": "Texte exact de l'indicateur choisi",
      "pourcentage": 60,
      "justification": "Explication bienveillante du choix"
    },
    "1": {
      "indicateur": "Texte exact de l'indicateur choisi",
      "pourcentage": 80,
      "justification": "Explication bienveillante du choix"
    }
  },
  "commentaire_final": "Commentaire g√©n√©ral encourageant et constructif qui souligne les points forts et propose des pistes d'am√©lioration concr√®tes"
}`;
}

/**
 * üë§ Construire le prompt user pour Claude - VERSION CORRIG√âE
 */
function construirePromptUser(typeProduction, grilleFormatee, copieEleve) {
  return `GRILLE DE CORRECTION :
Type de production : ${typeProduction}

CRIT√àRES √Ä √âVALUER :
${grilleFormatee}

COPIE DE L'√âL√àVE √Ä CORRIGER :
${copieEleve}

CONSIGNES SP√âCIFIQUES OBLIGATOIRES :
1. Corrige cette copie selon la grille fournie
2. Pour chaque crit√®re, choisis l'indicateur le plus appropri√© et justifie ton choix avec bienveillance
3. CRIT√àRE "R√âSUM√â" : V√©rifie imp√©rativement que l'√©l√®ve distingue bien le r√©sum√© (objectif, neutre) de la partie critique (arguments personnels). La structure doit √™tre : 1) R√©sum√© d'abord, 2) Partie critique ensuite. P√©nalise si ces parties sont m√©lang√©es ou confondues.
4. CRIT√àRE "PARTIE CRITIQUE - QUALIT√â PERSUASIVE" : Tu DOIS ABSOLUMENT √©valuer ce crit√®re s'il est pr√©sent. C'est OBLIGATOIRE. Analyse la force, la pertinence et la capacit√© de persuasion des arguments.
5. ORTHOGRAPHE/PONCTUATION : Sois BEAUCOUP PLUS S√âV√àRE. M√™me 3-4 fautes doivent emp√™cher d'atteindre "Acquis" ou "Parfaitement acquis". P√©nalise davantage les erreurs techniques.
6. √âVALUER TOUS LES CRIT√àRES : N'oublie aucun crit√®re de la grille. Chaque crit√®re doit recevoir une √©valuation.
7. Termine par un commentaire final encourageant qui souligne les points forts et propose des pistes d'am√©lioration concr√®tes

V√âRIFICATION FINALE : Assure-toi d'avoir √©valu√© CHAQUE crit√®re de la grille, en particulier ceux contenant "persuasif", "critique" ou "arguments".

R√©ponds uniquement en JSON selon le format sp√©cifi√©.`;
}

/**
 * üöÄ Appeler l'API Claude d'Anthropic
 */
function appellerAPIClaud(promptSystem, promptUser) {
  try {
    const apiKey = PropertiesService.getScriptProperties().getProperty('CLAUDE_API_KEY');
    
    if (!apiKey) {
      return {
        success: false,
        message: 'Cl√© API Claude non configur√©e. Ajoutez CLAUDE_API_KEY dans les propri√©t√©s du script.'
      };
    }
    
    const url = 'https://api.anthropic.com/v1/messages';
    
    const payload = {
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4000,
      system: promptSystem,
      messages: [
        {
          role: 'user',
          content: promptUser
        }
      ]
    };
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiKey,
        'anthropic-version': '2023-06-01'
      },
      payload: JSON.stringify(payload)
    };
    
    console.log('üöÄ Envoi requ√™te vers API Claude...');
    
    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    console.log('üì° R√©ponse API Claude - Code:', responseCode);
    
    if (responseCode === 200) {
      const data = JSON.parse(responseText);
      
      if (data.content && data.content[0] && data.content[0].text) {
        const contenuIA = data.content[0].text;
        
        try {
          // Parser la r√©ponse JSON de Claude
          const reponseIA = JSON.parse(contenuIA);
          
          // V√©rifier la structure
          if (reponseIA.corrections && reponseIA.commentaire_final) {
            return {
              success: true,
              data: reponseIA
            };
          } else {
            return {
              success: false,
              message: 'Format de r√©ponse IA invalide'
            };
          }
          
        } catch (parseError) {
          console.error('Erreur parsing JSON IA:', parseError);
          console.log('Contenu re√ßu:', contenuIA);
          
          return {
            success: false,
            message: 'R√©ponse IA non parsable. Contenu: ' + contenuIA.substring(0, 200) + '...'
          };
        }
        
      } else {
        return {
          success: false,
          message: 'R√©ponse API vide ou incorrecte'
        };
      }
      
    } else {
      console.error('Erreur API Claude:', responseCode, responseText);
      
      let messageErreur = 'Erreur API Claude';
      
      try {
        const errorData = JSON.parse(responseText);
        if (errorData.error && errorData.error.message) {
          messageErreur = errorData.error.message;
        }
      } catch (e) {
        // Ignore parse error
      }
      
      return {
        success: false,
        message: `${messageErreur} (Code: ${responseCode})`
      };
    }
    
  } catch (error) {
    console.error('Erreur appel API Claude:', error);
    return {
      success: false,
      message: `Erreur technique: ${error.message}`
    };
  }
}

/**
 * üîß Fonction de test pour v√©rifier la configuration API
 */
function testerAPIClaud() {
  const apiKey = PropertiesService.getScriptProperties().getProperty('CLAUDE_API_KEY');
  
  if (!apiKey) {
    console.log('‚ùå Cl√© API Claude non configur√©e');
    return false;
  }
  
  // Prompt de test plus strict
  const promptSystemTest = `Tu es un assistant de test. Tu dois r√©pondre EXCLUSIVEMENT en JSON valide avec cette structure exacte :
{
  "corrections": {},
  "commentaire_final": "Test de connexion r√©ussi"
}`;
  
  const promptUserTest = `Test de connexion API. R√©ponds uniquement en JSON selon le format sp√©cifi√©.`;
  
  console.log('üß™ Test de connexion API Claude...');
  
  const resultat = appellerAPIClaud(promptSystemTest, promptUserTest);
  
  if (resultat.success) {
    console.log('‚úÖ API Claude fonctionnelle');
    console.log('üìã R√©ponse re√ßue:', JSON.stringify(resultat.data));
    return true;
  } else {
    console.log('‚ùå Erreur API Claude:', resultat.message);
    return false;
  }
}

/**
 * üîç Fonction de debug pour v√©rifier la cl√© API
 */
function verifierCleAPI() {
  const cle = PropertiesService.getScriptProperties().getProperty('CLAUDE_API_KEY');
  console.log('Cl√© trouv√©e:', cle ? 'OUI' : 'NON');
  if (cle) {
    console.log('D√©but de la cl√©:', cle.substring(0, 10) + '...');
  }
}
